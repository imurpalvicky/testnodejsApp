#!/bin/bash

# Define your GitHub access token
TOKEN="your_github_access_token"

# Define the GraphQL query
query='query ($repo_owner: String!, $repo_name: String!, $pr_number: Int!) { 
  repository(owner: $repo_owner, name: $repo_name) { 
    pullRequest(number: $pr_number) {
      timelineItems(itemTypes: LABELED_EVENT, first: 100) {
        nodes {
          ... on LabeledEvent {
            actor { login }
            # add any other LabeledEvent fields you want to query here
          }
        }
      }
    }
  }
}'

# Define the variables
repo_owner="your_repo_owner"  # Replace with the repository owner
repo_name="your_repo_name"    # Replace with the repository name
pr_number=1                   # Replace with the pull request number

# Construct the JSON payload with variables
variables=$(jq -n \
                  --arg repo_owner "$repo_owner" \
                  --arg repo_name "$repo_name" \
                  --arg pr_number "$pr_number" \
                  '{repo_owner: $repo_owner, repo_name: $repo_name, pr_number: ($pr_number | tonumber)}')

# Construct the GraphQL request
request=$(jq -n --arg query "$query" --argjson variables "$variables" '{query: $query, variables: $variables}')

# Make the GraphQL request using curl
response=$(curl -s -X POST \
  -H "Authorization: bearer $TOKEN" \
  -H "Content-Type: application/json" \
  --data "$request" \
  https://api.github.com/graphql)

# Print the response
echo "$response"



import requests
import msal

# Azure AD app credentials
CLIENT_ID = 'your_client_id'
CLIENT_SECRET = 'your_client_secret'
TENANT_ID = 'your_tenant_id'

# Email details
EMAIL_FROM = 'your_email@domain.com'
EMAIL_TO = 'recipient@domain.com'
SUBJECT = 'Test Email'
BODY = 'This is a test email sent from Python.'

# Get access token
authority = f"https://login.microsoftonline.com/{TENANT_ID}"
app = msal.ConfidentialClientApplication(
    CLIENT_ID, authority=authority,
    client_credential=CLIENT_SECRET
)

scopes = ["https://graph.microsoft.com/.default"]
result = app.acquire_token_for_client(scopes=scopes)

if "access_token" in result:
    access_token = result["access_token"]
else:
    print("Error obtaining access token.")
    print(result)
    exit()

# Send email
send_mail_url = 'https://graph.microsoft.com/v1.0/me/sendMail'
headers = {
    'Authorization': f'Bearer {access_token}',
    'Content-Type': 'application/json'
}

email_message = {
    "message": {
        "subject": SUBJECT,
        "body": {
            "contentType": "Text",
            "content": BODY
        },
        "toRecipients": [
            {
                "emailAddress": {
                    "address": EMAIL_TO
                }
            }
        ]
    }
}

response = requests.post(send_mail_url, headers=headers, json=email_message)

if response.status_code == 202:
    print("Email sent successfully!")
else:
    print("Failed to send email.")
    print(response.json())


get_workflow_id_query='
query($runId: ID!) {
  node(id: $runId) {
    ... on WorkflowRun {
      workflow {
        id
      }
    }
  }
}'



query($owner: String!, $name: String!, $workflowId: ID!, $cursor: String) {
  repository(owner: $owner, name: $name) {
    workflow(id: $workflowId) {
      runs(first: 100, after: $cursor) {
        nodes {
          id
          name
          status
          conclusion
          createdAt
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
  }

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def send_email(subject, body, to_address, from_address, smtp_server, smtp_port):
    try:
        # Create a MIME object
        msg = MIMEMultipart()
        msg['From'] = from_address
        msg['To'] = to_address
        msg['Subject'] = subject

        # Attach the body with the msg instance
        msg.attach(MIMEText(body, 'plain'))

        # Connect to the server
        server = smtplib.SMTP(smtp_server, smtp_port)

        # Send the email
        server.sendmail(from_address, to_address, msg.as_string())

        # Terminate the session
        server.quit()

        print("Email sent successfully!")
    except Exception as e:
        print(f"Failed to send email: {e}")

# Configuration
subject = "Test Email"
body = "This is a test email sent using an Exchange relay server."
to_address = "recipient@example.com"
from_address = "sender@example.com"
smtp_server = "smtp.yourdomain.com"
smtp_port = 25  # Use 25 or 587 (without STARTTLS) depending on your server configuration

# Send the email
send_email(subject, body, to_address, from_address, smtp_server, smtp_port)

