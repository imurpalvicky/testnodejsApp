#!/bin/bash

#!/bin/bash

=TEXTJOIN(", ", TRUE, IFERROR(FILTERXML("<root><x>" & SUBSTITUTE(B1, " ", "</x><x>") & "</x></root>", "//x[number(.)=number(.) and (string-length(.)=3 or string-length(.)=4)]"), ""))

=TEXTJOIN(", ", TRUE, IF(ISNUMBER(FIND(ROW(INDIRECT("100:9999")), A1)), ROW(INDIRECT("100:9999")), ""))


=TEXTJOIN(", ", TRUE, IFERROR(MID(A1, FIND("-", A1) + ROW(INDIRECT("1:" & LEN(A1) - FIND("-", A1))), 4) * (ISNUMBER(--MID(A1, FIND("-", A1) + ROW(INDIRECT("1:" & LEN(A1) - FIND("-", A1))), 4))) * (LEN(MID(A1, FIND("-", A1) + ROW(INDIRECT("1:" & LEN(A1) - FIND("-", A1))), 4)) = 3) + MID(A1, FIND("-", A1) + ROW(INDIRECT("1:" & LEN(A1) - FIND("-", A1))), 3) * (ISNUMBER(--MID(A1, FIND("-", A1) + ROW(INDIRECT("1:" & LEN(A1) - FIND("-", A1))), 3))) * (LEN(MID(A1, FIND("-", A1) + ROW(INDIRECT("1:" & LEN(A1) - FIND("-", A1))), 3)) = 3), ""), ""))


# Function to URL-encode a string
urlencode() {
    local string="${1}"
    local length="${#string}"
    local encoded=""

    for (( i = 0; i < length; i++ )); do
        local c="${string:i:1}"
        case "$c" in
            [a-zA-Z0-9.~_-]) 
                encoded+="$c"
                ;;
            *)
                encoded+=$(printf '%%%02X' "'$c")
                ;;
        esac
    done

    echo "${encoded}"
}

# Original URL with spaces and special characters in parameters
original_url="https://example.com/search?q=hello world&name=John Doe"

# Extract base URL and parameters
base_url=$(echo "$original_url" | sed -E 's/(.*)\?.*/\1/')
parameters=$(echo "$original_url" | sed -n 's/.*?\(.*\)/\1/p')

# Encode parameters
encoded_params=""
IFS='&' read -ra params <<< "$parameters"
for param in "${params[@]}"; do
    key=$(echo "$param" | cut -d '=' -f 1)
    value=$(echo "$param" | cut -d '=' -f 2)
    encoded_key=$(urlencode "$key")
    encoded_value=$(urlencode "$value")
    encoded_params+="${encoded_key}=${encoded_value}&"
done
encoded_params=${encoded_params%&}  # Remove the trailing &

# Construct the encoded URL
encoded_url="${base_url}?${encoded_params}"

echo "Encoded URL: $encoded_url"

# Use the encoded URL in a curl command
curl -X GET "$encoded_url" -H "Authorization: Bearer YOUR_ACCESS_TOKEN"




# Define your GitHub access token
TOKEN="your_github_access_token"

# Define the GraphQL query
query='query ($repo_owner: String!, $repo_name: String!, $pr_number: Int!) { 
  repository(owner: $repo_owner, name: $repo_name) { 
    pullRequest(number: $pr_number) {
      timelineItems(itemTypes: LABELED_EVENT, first: 100) {
        nodes {
          ... on LabeledEvent {
            actor { login }
            # add any other LabeledEvent fields you want to query here
          }
        }
      }
    }
  }
}'

# Define the variables
repo_owner="your_repo_owner"  # Replace with the repository owner
repo_name="your_repo_name"    # Replace with the repository name
pr_number=1                   # Replace with the pull request number

# Construct the JSON payload with variables
variables=$(jq -n \
                  --arg repo_owner "$repo_owner" \
                  --arg repo_name "$repo_name" \
                  --arg pr_number "$pr_number" \
                  '{repo_owner: $repo_owner, repo_name: $repo_name, pr_number: ($pr_number | tonumber)}')

# Construct the GraphQL request
request=$(jq -n --arg query "$query" --argjson variables "$variables" '{query: $query, variables: $variables}')

# Make the GraphQL request using curl
response=$(curl -s -X POST \
  -H "Authorization: bearer $TOKEN" \
  -H "Content-Type: application/json" \
  --data "$request" \
  https://api.github.com/graphql)

# Print the response
echo "$response"



import requests
import msal

# Azure AD app credentials
CLIENT_ID = 'your_client_id'
CLIENT_SECRET = 'your_client_secret'
TENANT_ID = 'your_tenant_id'

# Email details
EMAIL_FROM = 'your_email@domain.com'
EMAIL_TO = 'recipient@domain.com'
SUBJECT = 'Test Email'
BODY = 'This is a test email sent from Python.'

# Get access token
authority = f"https://login.microsoftonline.com/{TENANT_ID}"
app = msal.ConfidentialClientApplication(
    CLIENT_ID, authority=authority,
    client_credential=CLIENT_SECRET
)

scopes = ["https://graph.microsoft.com/.default"]
result = app.acquire_token_for_client(scopes=scopes)

if "access_token" in result:
    access_token = result["access_token"]
else:
    print("Error obtaining access token.")
    print(result)
    exit()

# Send email
send_mail_url = 'https://graph.microsoft.com/v1.0/me/sendMail'
headers = {
    'Authorization': f'Bearer {access_token}',
    'Content-Type': 'application/json'
}

email_message = {
    "message": {
        "subject": SUBJECT,
        "body": {
            "contentType": "Text",
            "content": BODY
        },
        "toRecipients": [
            {
                "emailAddress": {
                    "address": EMAIL_TO
                }
            }
        ]
    }
}

response = requests.post(send_mail_url, headers=headers, json=email_message)

if response.status_code == 202:
    print("Email sent successfully!")
else:
    print("Failed to send email.")
    print(response.json())


get_workflow_id_query='
query($runId: ID!) {
  node(id: $runId) {
    ... on WorkflowRun {
      workflow {
        id
      }
    }
  }
}'



query($owner: String!, $name: String!, $workflowId: ID!, $cursor: String) {
  repository(owner: $owner, name: $name) {
    workflow(id: $workflowId) {
      runs(first: 100, after: $cursor) {
        nodes {
          id
          name
          status
          conclusion
          createdAt
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
  }

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def send_email(subject, body, to_address, from_address, smtp_server, smtp_port):
    try:
        # Create a MIME object
        msg = MIMEMultipart()
        msg['From'] = from_address
        msg['To'] = to_address
        msg['Subject'] = subject

        # Attach the body with the msg instance
        msg.attach(MIMEText(body, 'plain'))

        # Connect to the server
        server = smtplib.SMTP(smtp_server, smtp_port)

        # Send the email
        server.sendmail(from_address, to_address, msg.as_string())

        # Terminate the session
        server.quit()

        print("Email sent successfully!")
    except Exception as e:
        print(f"Failed to send email: {e}")

# Configuration
subject = "Test Email"
body = "This is a test email sent using an Exchange relay server."
to_address = "recipient@example.com"
from_address = "sender@example.com"
smtp_server = "smtp.yourdomain.com"
smtp_port = 25  # Use 25 or 587 (without STARTTLS) depending on your server configuration

# Send the email
send_email(subject, body, to_address, from_address, smtp_server, smtp_port)


name: Retrieve Vault Secrets

on: [push, pull_request]

jobs:
  retrieve-secrets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install necessary tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Retrieve AWS credentials from IMDSv2
        run: |
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          ROLE_NAME=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/iam/security-credentials/)
          AWS_CREDENTIALS=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE_NAME)

          export AWS_ACCESS_KEY_ID=$(echo $AWS_CREDENTIALS | jq -r '.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $AWS_CREDENTIALS | jq -r '.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $AWS_CREDENTIALS | jq -r '.Token')

      - name: Authenticate with Vault using AWS and retrieve secrets
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        run: |
          # Set variables
          VAULT_LOGIN_ENDPOINT="$VAULT_ADDR/v1/auth/aws/login"
          SECRET_PATH="your-secret-path"  # Replace with your actual secret path
          AWS_AUTH_ROLE="your-vault-role"  # Replace with your actual role

          # Construct the Vault login payload
          LOGIN_PAYLOAD=$(jq -n \
            --arg role "$AWS_AUTH_ROLE" \
            --arg access_key "$AWS_ACCESS_KEY_ID" \
            --arg secret_key "$AWS_SECRET_ACCESS_KEY" \
            --arg session_token "$AWS_SESSION_TOKEN" \
            '{
              role: $role,
              iam_http_request_method: "POST",
              iam_request_url: "https://sts.amazonaws.com/",
              iam_request_body: "Action=GetCallerIdentity&Version=2011-06-15",
              iam_request_headers: {
                "X-Amz-Security-Token": $session_token,
                "Authorization": "AWS4-HMAC-SHA256",
                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
              }
            }')

          # Authenticate with Vault and get the token
          VAULT_TOKEN=$(curl --silent --request POST --data "$LOGIN_PAYLOAD" "$VAULT_LOGIN_ENDPOINT" | jq -r '.auth.client_token')

          # Check if the token was retrieved successfully
          if [ -z "$VAULT_TOKEN" ]; then
            echo "Failed to retrieve Vault token"
            exit 1
          fi

          echo "Vault authentication successful"

          # Retrieve secrets from Vault
          SECRETS=$(curl --silent --header "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/$SECRET_PATH" | jq -r '.data')

          # Check if the secrets were retrieved successfully
          if [ -z "$SECRETS" ]; then
            echo "Failed to retrieve secrets"
            exit 1
          fi

          echo "Secrets retrieved: $SECRETS"

          # Optionally, you can export the secrets as environment variables
          export YOUR_SECRET_KEY=$(echo "$SECRETS" | jq -r '.your_secret_key')


name: Check .github Directory Changes

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-github-directory:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check for .github directory changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO_OWNER=${{ github.repository.owner.login }}
          REPO_NAME=${{ github.repository.name }}

          echo "Fetching changed files for PR #$PR_NUMBER in $REPO_OWNER/$REPO_NAME..."
          CHANGED_FILES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PR_NUMBER/files" \
            | jq -r '.[].filename')

          echo "Changed files:"
          echo "$CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q '^.github/'; then
            echo "Changes detected in the .github directory."
            echo "The pull request includes changes in the .github directory."
            echo "found=true" >> $GITHUB_ENV
          else
            echo "No changes detected in the .github directory."
            echo "The pull request does not include changes in the .github directory."
            echo "found=false" >> $GITHUB_ENV
          fi

